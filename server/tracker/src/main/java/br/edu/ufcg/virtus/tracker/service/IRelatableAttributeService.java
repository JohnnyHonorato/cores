package br.edu.ufcg.virtus.tracker.service;

import java.util.List;
import java.util.Locale;

import br.edu.ufcg.virtus.common.exception.BusinessException;
import br.edu.ufcg.virtus.common.util.MessageUtil;
import br.edu.ufcg.virtus.tracker.enums.AttributeType;
import br.edu.ufcg.virtus.tracker.model.AttributeValue;
import br.edu.ufcg.virtus.tracker.model.Comment;

public interface IRelatableAttributeService {

    default void clearRelatedAttributeValues(AttributeType type, Integer parentValue) throws BusinessException {
        //TODO carregar dados na ordem para garantir que os filhos serão limpos antes de serem carregados
        // (carregar no front primeiro os atributos pai do relacionamento, depois seus respectivos filhos recursivamente
        // ou carregar todo o TrackerDTO já no backend tratando e gerando od logs antes de retornar o objeto completo na requisição)
        // task: #117012
        final List<AttributeValue> parentValues = this.getAttributeValueService().getByTypeAndValue(type, parentValue.toString());
        for (final AttributeValue parentAttributeValue : parentValues) {
            this.valueDeletedUpdateLog(parentAttributeValue);
            final List<AttributeValue> childrenValues =
                    this.getAttributeValueService().getRelatedChildren(parentAttributeValue);
            for (final AttributeValue childAttributeValue : childrenValues) {
                if (childAttributeValue.getValue() != null) {
                    this.insertValueClearUpdateLog(childAttributeValue);
                    childAttributeValue.setValue(null);
                    this.getAttributeValueService().update(childAttributeValue.getId(), childAttributeValue);
                }
            }
        }
    }

    default void insertValueClearUpdateLog(AttributeValue attributeValue) throws BusinessException {
        final String updateLogMessageFormat = MessageUtil.findMessage("tracker.update-log.value-cleared-by-parent", new Locale("pt", "BR"));
        final Comment comment = new Comment();
        comment.setAutoGenerated(true);
        comment.setSystemLog(true);
        comment.setText(String.format(updateLogMessageFormat, attributeValue.getAttribute().getTitle(), attributeValue.getAttribute().getRelatedAttribute().getTitle()));
        comment.setTracker(attributeValue.getTracker());
        this.getCommentService().insert(comment);
    }

    default void valueDeletedUpdateLog(AttributeValue attributeValue) throws BusinessException {
        final String updateLogMessageFormat = MessageUtil.findMessage("tracker.update-log.value-deleted", new Locale("pt", "BR"));
        final String logMessage = String.format(updateLogMessageFormat, attributeValue.getValue(), attributeValue.getAttribute().getTitle());

        if (!this.getCommentService().existsUpdateLog(logMessage, attributeValue.getTracker().getId())) {
            final Comment comment = new Comment();
            comment.setAutoGenerated(true);
            comment.setSystemLog(true);
            comment.setText(logMessage);
            comment.setTracker(attributeValue.getTracker());
            this.getCommentService().insert(comment);
        }
    }

    AttributeValueService getAttributeValueService();

    CommentService getCommentService();
}
